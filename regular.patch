diff --git a/Make b/Make
index f863c92..188837c 100644
--- a/Make
+++ b/Make
@@ -1,6 +1,4 @@
--I .
 -install none
-COQDOCFLAGS = "-s --external 'http://ssr2.msr-inria.inria.fr/doc/ssreflect-1.4/' Ssreflect"
 misc.v
 pumping.v
 non_regular.v
diff --git a/automata.v b/automata.v
index e63d92e..62c9872 100644
--- a/automata.v
+++ b/automata.v
@@ -76,9 +76,9 @@ End DFA_Acceptance.
 
 Definition dfa_lang A := [pred w | dfa_accept (dfa_s A) w].
 
-Arguments delta_s A w.
+Arguments delta_s A w : assert.
 Arguments delta [A] x w.
-Arguments dfa_accept A x w.
+Arguments dfa_accept A x w : assert.
 
 (** ** Nondeterministic Finite Automata. *)
 Record nfa : Type := {
diff --git a/dfa_to_re.v b/dfa_to_re.v
index 8e4cd74..9784736 100644
--- a/dfa_to_re.v
+++ b/dfa_to_re.v
@@ -161,7 +161,7 @@ Section KleeneAlgorithm.
                       (L^X x y).
   Proof.
     move => w. apply/idP/idP.
-    - apply/(size_induction (f:=size)): w x y => w IHw x y.
+    - elim/(size_induction (f:=@size char)): w x y => w IHw x y.
       move/L_split => [|[w1 [w2 [Hw' [H1 [Hw1 Hw2]]]]]].
       + rewrite inE => ->. by rewrite orbT.
       + move: (IHw w2 H1 z y Hw2) Hw' => H4 -> {IHw H1}.
diff --git a/homomorphism.v b/homomorphism.v
index c278827..a9cf6db 100644
--- a/homomorphism.v
+++ b/homomorphism.v
@@ -50,7 +50,7 @@ End HomDef.
 
 
 
-Implicit Arguments homomorphism [char char'].
+Arguments homomorphism [char char'].
 
 Section Homomorphism.
   Variables (char char' : finType).
@@ -133,7 +133,7 @@ Section Homomorphism.
 
 End Homomorphism.
 
-Implicit Arguments dfa_preim [char char'].
+Arguments dfa_preim [char char'].
 
 
 Lemma im_regular (char char' : finType) (h : word char -> word char') L :
diff --git a/non_regular.v b/non_regular.v
index 60dd204..065f78b 100644
--- a/non_regular.v
+++ b/non_regular.v
@@ -55,7 +55,7 @@ Section NonRegular.
 
   Lemma count_nseq (T : eqType) (c d : T) n :
     count (pred1 c) (nseq n d) = (c == d) * n.
-  Proof. elim: n => //= n. rewrite [d == c]eq_sym. by case e: (c == d) => /= ->. Qed.
+  Proof. by elim: n => [|?]; rewrite (muln0, mulnS) //= [d == c]eq_sym => ->. Qed.
 
   Lemma countL n1 n2 : count (pred1 a) (nseq n1 a ++ nseq n2 b) = n1.
   Proof. by rewrite count_cat !count_nseq (negbTE Hab) eqxx //= mul1n mul0n addn0. Qed.
@@ -80,4 +80,4 @@ Section NonRegular.
     move/lP. exact: Lab_eq. apply/lP. by exists n2.
   Qed.
 
-End NonRegular.
\ No newline at end of file
+End NonRegular.
diff --git a/regexp.v b/regexp.v
index a97bb85..ee27ba4 100644
--- a/regexp.v
+++ b/regexp.v
@@ -137,8 +137,8 @@ Canonical Structure form_eqType := EqType _ regexp_eqMixin.
 
 End RegExp.
 
-Implicit Arguments void [].
-Implicit Arguments eps [].
+Arguments void : clear implicits.
+Arguments eps : clear implicits.
 
 
 Section ReLang.
@@ -154,12 +154,12 @@ Fixpoint re_lang (e : regexp char) : dlang char :=
   | Conc e1 e2 => conc (re_lang e1) (re_lang e2)
   end.
 
-Canonical Structure req_exp_predType := Eval hnf in mkPredType re_lang.
+Canonical Structure req_exp_predType := Eval hnf in PredType re_lang.
 End ReLang.
 
 
 Prenex Implicits Plus.
-Implicit Arguments plusP [char r s w].
+Arguments plusP {char r s w}.
 
 Notation "'Void'" := (@Void _).
 Notation "'Eps'" := (@Eps _).
-- 
2.20.1

